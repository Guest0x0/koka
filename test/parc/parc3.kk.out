module parc/parc3
import std/core/types = std/core/types = "";
import std/core/int = std/core/int = "";
import std/core = std/core = "";
pub fun test : (xs : list<int>, y : int, z : int) -> int
 = fn(xs: list<int>, y: int, z: int){
 match (xs) {
 (std/core/types/Cons(((@skip std/core/types/@Box((x: int)) : @Box ) as @box-xxx: @Box), (@pat@xxx: list<int>)) : list<int> )
 | std/core/int/(==)(x, z) -> val _ : ()
 = std/core/types/@drop(z);
 val _ : ()
 = std/core/types/@drop(y);
 val _ : ()
 = (match ((std/core/types/@is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/@drop(@pat@xxx);
 std/core/types/Unit;
 std/core/types/@free(xs);
 _
 -> val _ : ()
 = val _ : int
 = std/core/types/@dup(x);
 std/core/types/Unit;
 val _ : ()
 = std/core/types/@dec-ref(xs);
 std/core/types/Unit;
 });
 x;
 (std/core/types/Cons(((@skip std/core/types/@Box((x@xxx: int)) : @Box ) as @box-xxx: @Box), (@pat@xxx: list<int>)) : list<int> )
 | std/core/int/(==)(x@xxx, y) -> val _ : ()
 = std/core/types/@drop(z);
 val _ : ()
 = (match ((std/core/types/@is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/@drop(@pat@xxx);
 val _ : ()
 = std/core/types/@drop(@box-xxx);
 std/core/types/Unit;
 std/core/types/@free(xs);
 _
 -> val _ : ()
 = std/core/types/Unit;
 val _ : ()
 = std/core/types/@dec-ref(xs);
 std/core/types/Unit;
 });
 y;
 (std/core/types/Cons(((@skip std/core/types/@Box((@pat@xxx: int)) : @Box ) as @box-xxx: @Box), (@pat@xxx: list<int>)) : list<int> )
 | std/core/int/(==)(y, z) -> val _ : ()
 = std/core/types/@drop(z);
 val _ : ()
 = std/core/types/@drop(y);
 val _ : ()
 = (match ((std/core/types/@is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/@drop(@pat@xxx);
 val _ : ()
 = std/core/types/@drop(@box-xxx);
 std/core/types/Unit;
 std/core/types/@free(xs);
 _
 -> val _ : ()
 = std/core/types/Unit;
 val _ : ()
 = std/core/types/@dec-ref(xs);
 std/core/types/Unit;
 });
 2;
 _
 -> val _ : ()
 = std/core/types/@drop(z);
 val _ : ()
 = std/core/types/@drop(xs);
 y;
 };
 };